import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command

# üîê –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "8046924394:AAHogO7tHUdt7m8ZHNxZnt6gF2mSLHxBYng"
ADMIN_ID = 7634857359  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîé –ü—Ä–æ—Å—Ç–µ–π—à–∞—è "–±–∞–∑–∞"
guarantors = {}  # username -> user_id
scammers = {}    # username -> dict

# üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
async def send_photo_or_text(message: Message, image_path: str, text: str):
    try:
        photo = FSInputFile(image_path)
        await message.answer_photo(photo, caption=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ '{image_path}': {e}")
        await message.answer(text)

# üöÄ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /check @username —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# üîç /check @username
@dp.message(Command("check"))
async def cmd_check(message: Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /check @username")
        return

    username = args[1][1:].lower()

    if username in guarantors:
        user_id = guarantors[username]
        text = (
            f"üñº –ù–∏–∫: @{username}\n"
            f"üÜî id: {user_id}\n"
            f"üï∞ –ü—Ä–æ–≤–µ—Ä–∫–∞...\n"
            f"‚úÖ –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç!"
        )
        await send_photo_or_text(message, "guarant.jpg", text)

    elif username in scammers:
        scam = scammers[username]
        reasons = "\n".join(f"- {r}" for r in scam["reasons"])
        text = (
            f"üñº –ù–∏–∫: @{username}\n"
            f"üÜî id: {scam['id']}\n"
            f"üï∞ –ü—Ä–æ–≤–µ—Ä–∫–∞...\n"
            f"‚ùå –≠—Ç–æ —Å–∫–∞–º–µ—Ä!\n"
            f"üì¶ –°–¥–µ–ª–æ–∫ –≤ —Å–∫–∞–º–µ: {scam['count']}\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–∏–∫—Å–∞—Ü–∏—è: {scam['last_date']}\n"
            f"\nüìÑ –ü—Ä–∏—á–∏–Ω—ã:\n{reasons}"
        )
        await send_photo_or_text(message, "scammer.jpg", text)

    else:
        text = (
            f"üñº –ù–∏–∫: @{username}\n"
            f"üÜî id: -\n"
            f"üï∞ –ü—Ä–æ–≤–µ—Ä–∫–∞...\n"
            f"üåå –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
        await send_photo_or_text(message, "user.jpg", text)

# ‚ûï /add_guarant @username (reply optional)
@dp.message(Command("add_guarant"))
async def add_guarant(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add_guarant @username")

    username = args[1][1:].lower()
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else "-"
    guarantors[username] = user_id
    await message.answer(f"‚úÖ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞—Ä–∞–Ω—Ç—ã.")

# ‚ùå /remove_guarant @username
@dp.message(Command("remove_guarant"))
async def remove_guarant(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remove_guarant @username")

    username = args[1][1:].lower()
    if username in guarantors:
        guarantors.pop(username)
        await message.answer(f"üóë @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –≥–∞—Ä–∞–Ω—Ç–æ–≤.")
    else:
        await message.answer(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤.")

# ‚ùå /add_scam @username 2 –ø—Ä–∏—á–∏–Ω–∞
@dp.message(Command("add_scam"))
async def add_scam(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split(maxsplit=3)
    if len(args) < 3 or not args[1].startswith("@"):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add_scam @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–¥–µ–ª–æ–∫ –ø—Ä–∏—á–∏–Ω–∞")

    username = args[1][1:].lower()
    try:
        count = int(args[2])
    except ValueError:
        return await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    reason = args[3] if len(args) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else "-"

    if username in scammers:
        scammers[username]["count"] += count
        scammers[username]["reasons"].append(reason)
        scammers[username]["last_date"] = "—Å–µ–π—á–∞—Å"
    else:
        scammers[username] = {
            "id": user_id,
            "count": count,
            "last_date": "—Å–µ–π—á–∞—Å",
            "reasons": [reason]
        }

    await message.answer(f"üö´ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–∞–º–µ—Ä—ã.")

# ‚ùå /remove_scam @username
@dp.message(Command("remove_scam"))
async def remove_scam(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remove_scam @username")

    username = args[1][1:].lower()
    if username in scammers:
        scammers.pop(username)
        await message.answer(f"üóë @{username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–∞–º–µ—Ä–æ–≤.")
    else:
        await message.answer(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–∞–º–∞—Ö.")

# üîÅ –ó–∞–ø—É—Å–∫
async def main():
    print("–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:", os.getcwd())
    print("–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:", os.listdir())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
